#!/usr/bin/env perl
## Copyright © 2012,2013 by Daniel Friesel <derf@chaosdorf.de>
## License: WTFPL:
##   0. You just DO WHAT THE FUCK YOU WANT TO

use strict;
use warnings;
use 5.012;
use utf8;
use autodie qw(:all);

use Data::ICal;
use Data::ICal::Entry::Event;
use DateTime;
use DateTime::Format::ICal;
use DateTime::Format::Strptime;
use MediaWiki::API;

our $VERSION = '0.0';

$ENV{HTTPS_CA_DIR} = '/etc/ssl/certs';

my $content = <<'EOF';

* [[Help:Current events|Über diese Seite]]
* [[Form:Event|Event anlegen]]
* [http://flux.derf0.net/cccd.ics ical export]
* [[Chaosdorf Wiki:Past events|Archiv]]

{| class="wikitable"
|-
! Mo
! Di
! Mi
! Do
! Fr
! Sa
! So
EOF

my $soon_content = <<'EOF';

{{Infobox start nonfloat
 | name = [[Chaosdorf Wiki:Current events|Termine]]
 | headercolor = #ccc
}}<!--
EOF

my $past_content = <<'EOF';

Vergangene Events (ohne Wiederkehrende, nur Einzeltermine)

{{TOCright}}

EOF

my $soon_cnt  = 3;
my $icalfile  = '/home/derf/cccd.ics';
my $ical      = Data::ICal->new();
my $last_date = q{};
my $today     = DateTime->now(
	time_zone => 'UTC',
	locale    => 'de_DE'
);
my $yesterday = $today->clone->subtract( days => 1 );

my @dates = qw(
  monday tuesday wednesday thursday friday saturday sunday
);
my @blacklist = ( qw(Template:Freitagsfoo Freitagsfoo), 'Further Foo' );
my @type_blacklist = qw(Meet-Up);

my $mw = MediaWiki::API->new(
	{
		api_url  => 'https://wiki.chaosdorf.de/api.php',
		on_error => \&on_error,
	}
);

sub on_error {
	print 'Error code: ' . $mw->{error}->{code} . "\n";
	print $mw->{error}->{stacktrace} . "\n";
	exit 1;
}

$mw->login(
	{
		lgname     => $ENV{WIKI_USER},
		lgpassword => $ENV{WIKI_PASSWORD},
		lgdomain   => 'local',
	}
);

sub translate_type {
	my ($type) = @_;

	given ($type) {
		when ('Lecture') { return 'Vortrag' }
		default          { return $type }
	}
}

sub write_ical {
	my $caltext = $ical->as_string;

	$caltext =~ s{PRODID:.*\r\n}{};
	$caltext
	  =~ s{VERSION:[^\r\n]*\K}{\r\nCALSCALE:GREGORIAN\r\nPRODID:-//CCCD//Events//DE};
	$caltext =~ s{DTSTART:TZID}{DTSTART;TZID}g;
	$caltext =~ s{DTSTAMP:TZID}{DTSTAMP;TZID}g;
	$caltext =~ s{DTSTAMP:.*\KZ}{}g;
	$caltext =~ s{UID:.*:}{UID:}g;

	open( my $fh, '>:encoding(utf-8)', $icalfile );
	print $fh $caltext;
	close($fh);

	system("scp -q $icalfile extern.chaosdorf.de:public_html");
}

sub add_ical {
	my ( $date, $pageref ) = @_;

	my $time     = $pageref->{time};
	my $page     = $pageref->{page} // q{};
	my $type     = $pageref->{type};
	my $pagename = $pageref->{title} // $pageref->{page};
	my $duration = $pageref->{duration} // 4;

	my $vevent = Data::ICal::Entry::Event->new();

	$page =~ s{ }{_}g;

	my $start = $date->clone;
	if ($time) {
		my ( $th, $tm ) = ( $time =~ m{ (.?.) : (..) }ox );
		$start->add(
			hours   => $th,
			minutes => $tm
		);
	}
	$vevent->add_properties(
		summary     => $pagename,
		description => $pagename,
		dtstart     => DateTime::Format::ICal->format_datetime($start),
		dtstamp     => DateTime::Format::ICal->format_datetime($today),
		duration    => "PT${duration}H00M",
		location    => 'Hüttenstr. 25, Düsseldorf, DE',
		sequence    => 0,
		uid => DateTime::Format::ICal->format_datetime($start) . '@cccd',
		url => "https://wiki.chaosdorf.de/${page}",
	);
	$ical->add_entry($vevent);
}

# skaliert nicht.
# TODO: cache
sub add_entry {
	my ( $date, $pageref ) = @_;
	my $ymd = $date->ymd;

	if ( $ymd ne $last_date ) {
		if ( $date->day_of_week == 1 ) {
			$content .= "|-\n";
		}
		$content
		  .= '| style="height: 7em; min-width: 10em; max-width: 10%; vertical-align: top;';
		if ( DateTime->compare( $date, $yesterday ) == -1 ) {
			$content .= ' background-color: #cccccc;';
		}
		$content .= '"| ';
		$content .= $date->strftime(
			"<span style=\"color: #666666;\">%b %d</span><br/>\n");
	}

	if ($pageref) {
		my $time     = $pageref->{time} // q{};
		my $page     = $pageref->{page};
		my $type     = $pageref->{type};
		my $pagename = $pageref->{title} // $pageref->{page};
		$pagename =~ s{(\s+|/) $ymd}{}x;

		$content .= '<span>';
		$content .= sprintf( '%s [[%s|%s]]', $time, $page, $pagename );

		#		if ( $type and not( $type ~~ \@type_blacklist ) ) {
		#			$content .= sprintf( ' (%s)', translate_type($type) );
		#		}
		$content .= "</span><br/>\n";

		if ( $soon_cnt > 0 and DateTime->compare( $date, $yesterday ) == 1 ) {
			$soon_cnt--;
			$soon_content .= sprintf(
				"-->{{Infobox row | name = %s | value = %s [[%s|%s]] }}<!--\n",
				$date->strftime('%b %d'),
				$time, $page, $pagename
			);
			if ( $soon_cnt == 0 ) {
				$soon_content .= "-->\n|}\n";
			}
		}
	}

	$last_date = $ymd;

	add_ical( $date, $pageref );
	return;
}

sub add_past_entry {
	my ( $date, $pageref ) = @_;
	my $ymd = $date->ymd;

	my $time     = $pageref->{time} // q{};
	my $page     = $pageref->{page};
	my $type     = $pageref->{type};
	my $pagename = $pageref->{title} // $pageref->{page};
	$pagename =~ s{\s+ $ymd}{}x;

	if ( $ymd ne $last_date ) {
		$past_content .= $date->strftime("\n== %A, %d. %B %Y ==\n");
	}
	$past_content .= sprintf( '* %s [[%s|%s]]', $time, $page, $pagename );
	if ( $type and not( $type ~~ \@type_blacklist ) ) {
		$past_content .= sprintf( ' (%s)', translate_type($type) );
	}
	$past_content .= "\n";
	$last_date = $ymd;
}

sub monthly_event {
	my ($day) = @_;

	my @ret = qw(1st 2nd 3rd 4th 5th);
	my $dow = $day->day_of_week - 1;
	my $dom = $day->day_of_month - 1;

	return sprintf( '%s %s', $ret[ int( $dom / 7 ) ], $dates[$dow] );
}

sub monthly_event_rev {
	my ($day) = @_;

	my $dom  = $day->day_of_month;
	my $last = DateTime->last_day_of_month(
		year      => $day->year,
		month     => $day->month,
		time_zone => 'Europe/Berlin',
		locale    => 'de_DE'
	)->day_of_month;

	if ( $last - $dom < 7 ) {
		return sprintf( 'last %s', $dates[ $day->day_of_week - 1 ] );
	}
	return 'none';
}

sub get_data_from_template {
	my ($pagename) = @_;
	my ( $date, $time, $type, $duration );

	my @lines = split( /\n/, mw_get($pagename) );
	my $in_template = 0;
	for my $line (@lines) {
		if ( $line =~ m/ ^ \s* {{Event \s* $ /ox ) {
			$in_template = 1;
		}
		if ( $line =~ m/ ^ \s* }} \s* $ /ox ) {
			$in_template = 0;
		}
		if (
			$in_template
			and
			( $line =~ m{ ^ \s* \| \s* date \s* = \s* (?<date>....-..-..) }ix
				or $line
				=~ m{ ^ \s* \| \s* date \s* = \s* every \s+ (?<date> .+ ) }ix
				or $line
				=~ m{ ^ \s* \| \s* date \s* = \s* monthly: \s* (?<date>....? \s+ [a-zA-Z]+) }ix
				or $line
				=~ m{ ^ \s* \| \s* date \s* = \s* (?<date>....? \s+ [a-zA-Z]+) \s+ (?: of \s+)? every \s+ month }ix
				or $line
				=~ m{ ^ \s* \| \s* date \s* = \s* (?<date>....? \s+ [a-zA-Z]+) \s+ (?: of \s+)? every \s+ (?<monthspec> other ) \s+ month }ix
			)
		  )
		{
			$date = lc( $+{date} );
			if ( $+{monthspec} ) {
				$date .= '/2';
			}
		}
		if (    $in_template
			and $line =~ m{ ^ \s* \| \s* start \s* = \s* (?<time>.?.:..) }ix )
		{
			$time = $+{time};
		}
		if (    $in_template
			and $line =~ m{ ^ \s* \| \s* type \s* = \s* (?<type>.+) }ix )
		{
			$type = $+{type};
		}
		if (    $in_template
			and $line
			=~ m{ ^ \s* \| \s* duration \s* = \s* (?<duration>\d+) }ix )
		{
			$duration = $+{duration};
		}
	}
	return (
		$date,
		{
			page     => $pagename,
			time     => $time,
			type     => $type,
			duration => $duration,
		}
	);
}

sub mw_get {
	my ($page) = @_;
	return $mw->get_page( { title => $page } )->{'*'};
}

sub mw_edit {
	my ( $page, $content ) = @_;

	my $timestamp = $mw->get_page( { title => $page } )->{timestamp};
	$mw->edit(
		{
			action        => 'edit',
			title         => $page,
			basetimestamp => $timestamp,
			text          => $content,
			bot           => 1,
		}
	) || die $mw->{error}->{code} . ': ' . $mw->{error}->{details};
}

my $recentchanges = $mw->list(
	{
		action  => 'query',
		list    => 'recentchanges',
		rclimit => 1,
	},
	{ max => 1, }
);

my $rcdate = DateTime::Format::Strptime->new(
	pattern   => '%FT%TZ',
	time_zone => 'UTC',
);

my $last_change = $rcdate->parse_datetime( $recentchanges->[0]->{timestamp} );

if ( $ARGV[0] ) {
	$last_change->add( minutes => $ARGV[0] );
	if ( DateTime->compare( $today, $last_change ) == 1 ) {
		exit(0);
	}
}

my $day = DateTime->now(
	time_zone => 'Europe/Berlin',
	locale    => 'de_DE'
);
$day->set_hour(0);
$day->set_minute(0);
$day->set_second(0);
$day->truncate( to => 'week' );

my @pages = @{
	$mw->list(
		{
			action  => 'query',
			list    => 'categorymembers',
			cmtitle => 'Category:Events',
			cmlimit => 100,
		},
		{ max => 20, }
	)
};

my ( %by_date, @unknown );

for my $page ( map { $_->{title} } @pages ) {
	if ( $page =~ m{ ^ .+ \s+ (?<date> \d{4}-\d{2}-\d{2}) $ }ox ) {
		my ( undef, $pageref ) = get_data_from_template($page);
		push( @{ $by_date{ $+{date} } }, $pageref );
	}
	elsif ( not( $page ~~ \@blacklist ) ) {
		my ( $date, $pageref ) = get_data_from_template($page);
		if ($date) {
			push( @{ $by_date{$date} }, $pageref );
		}
		else {
			push( @unknown, $page );
		}
	}
}

for ( 0 .. 48 ) {
	my $ymd = $day->ymd;
	my $dow = $day->day_of_week;

	my @all_pages = (
		@{ $by_date{ $dates[ $dow - 1 ] }      // [] },
		@{ $by_date{ monthly_event($day) }     // [] },
		@{ $by_date{ monthly_event_rev($day) } // [] },
		@{ $by_date{$ymd}                      // [] }
	);

	if ( ( $day->month % 2 ) == 0 ) {
		push( @all_pages, @{ $by_date{ monthly_event($day) . '/2' } // [] } );
		push( @all_pages,
			@{ $by_date{ monthly_event_rev($day) . '/2' } // [] } );
	}

	my @by_time = sort { $a->{time} cmp $b->{time} }
	  grep { defined $_->{time} } @all_pages;
	my @by_name = sort { $a->{title} cmp $b->{title} }
	  grep { not defined $_->{time} } @all_pages;

	if ( not @by_time and not @by_name ) {
		add_entry( $day, undef );
	}

	for my $page ( @by_time, @by_name ) {
		add_entry( $day, $page );
	}
	$day->add( days => 1 );
}

$day = DateTime->now(
	time_zone => 'Europe/Berlin',
	locale    => 'de_DE'
);
$day->set_hour(0);
$day->set_minute(0);
$day->set_second(0);

# past three years
for ( 0 .. 1100 ) {
	my $ymd = $day->ymd;
	my $dow = $day->day_of_week;

	my @all_pages = ( @{ $by_date{$ymd} // [] } );
	my @by_time = sort { $a->{time} cmp $b->{time} }
	  grep { defined $_->{time} } @all_pages;
	my @by_name = sort { $a->{title} cmp $b->{title} }
	  grep { not defined $_->{time} } @all_pages;

	for my $page ( @by_time, @by_name ) {
		add_past_entry( $day, $page );
	}
	$day->subtract( days => 1 );
}

$content .= "|}\n";

if (@unknown) {
	$content .= "\n== Ohne Datum ==\n";
	for my $page (@unknown) {
		$content .= "* [[$page]]\n";
	}
}

mw_edit( 'Chaosdorf Wiki:Current events',   $content );
mw_edit( 'Chaosdorf Wiki:Past events',      $past_content );
mw_edit( 'Template:Current events preview', $soon_content );

$mw->logout;

write_ical;
